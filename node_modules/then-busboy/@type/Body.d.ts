import { FormData, File, FileLike } from "formdata-node";
import { BodyField } from "./BodyField";
import type { BodyFile } from "./BodyFile";
export declare type BodyEntryPath = Array<string | number>;
export declare type BodyEntryValue = BodyFile | File | FileLike | BodyField;
export declare type BodyEntryRawValue = BodyEntryValue | string | number | boolean | null | undefined;
export declare type BodyEntry = [BodyEntryPath, BodyEntryValue];
export declare type BodyRawEntry = [BodyEntryPath, BodyEntryRawValue];
export declare type BodyEntries = Array<BodyEntry>;
export declare type BodyRawEntries = Array<BodyRawEntry>;
export declare class Body {
    #private;
    /**
     * A shortcut for Body#json()
     */
    static json(value: BodyRawEntries | Body): object;
    /**
     * A shortcut for Body#formData()
     */
    static formData(value: BodyRawEntries | Body): FormData;
    constructor(entries: BodyRawEntries);
    get [Symbol.toStringTag](): string;
    /**
     * Returns an amount of entries in Body
     */
    get length(): number;
    entries(): Generator<BodyEntry, void, undefined>;
    keys(): Generator<BodyEntryPath, void, undefined>;
    values(): Generator<BodyEntryValue, void, undefined>;
    [Symbol.iterator](): Generator<BodyEntry, void, undefined>;
    /**
     * Returns a new Body subset with only files in it
     */
    files(): Body;
    /**
     * Returns a new Body subset with only fields in it
     */
    fields(): Body;
    /**
     * Returns an object representing Body entries
     */
    json(): object;
    /**
     * Returns FormData representation of Body entries
     */
    formData(): FormData;
}
