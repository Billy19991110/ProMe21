import type TypedEmitter from "typed-emitter";
import type { BodyEntry } from "./Body";
import { Body } from "./Body";
interface BodyEntriesEventsList {
    error(error: unknown): void;
    finish(body: Body): void;
}
declare type BodyEntriesEvents = TypedEmitter<BodyEntriesEventsList>;
declare const BodyEntries_base: new () => BodyEntriesEvents;
export declare class BodyEntries extends BodyEntries_base {
    #private;
    /**
     * Enqueues a new pending body entry.
     * You **nust** call this method *before* you add an entry to the list via `.pull()` method.
     */
    enqueue(): void;
    /**
     * Adds a new body entry to internal list
     *
     * @param entry An entry to add
     */
    pull(entry: BodyEntry): void;
    /**
     * Finishes body processing and calls finish event.
     *
     * @param isBodyRead And optional flag indicating that the request body is fully read. Can only be true if present.
     */
    finish(isBodyRead?: true): void;
}
export {};
