/// <reference types="node" />
import { inspect } from "util";
export interface BodyFieldOptions {
    fieldnameTruncated?: boolean;
    valueTruncated?: boolean;
    enc?: string;
    type?: string;
}
/**
 * BodyField class in the internal representation of a regular FormData value.
 */
export declare class BodyField<T = unknown> {
    #private;
    /**
     * Returns the name of the field.
     */
    readonly name: string;
    /**
     * Indicates whether the fieldname was truncated.
     */
    readonly fieldnameTruncated?: boolean;
    /**
     * Indicates whether the value was truncated.
     */
    readonly valueTruncated?: boolean;
    /**
     * Returns a value from Content-Transfer-Encoding header.
     */
    readonly enc?: string;
    /**
     * Returns a value from Content-Type header.
     */
    readonly type?: string;
    constructor(value: T, name: string, options?: BodyFieldOptions);
    /**
     * Returns the value of the BodyField.
     */
    valueOf(): T;
    /**
     * Returns string representation of the BodyField value.
     */
    toString(): string;
    [inspect.custom](): string;
}
