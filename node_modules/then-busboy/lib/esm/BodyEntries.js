var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _BodyEntries_entries, _BodyEntries_pending, _BodyEntries_isBodyRead;
import { EventEmitter } from "events";
import { Body } from "./Body.js";
export class BodyEntries extends EventEmitter {
    constructor() {
        super(...arguments);
        _BodyEntries_entries.set(this, []);
        _BodyEntries_pending.set(this, 0);
        _BodyEntries_isBodyRead.set(this, false
        /**
         * Enqueues a new pending body entry.
         * You **nust** call this method *before* you add an entry to the list via `.pull()` method.
         */
        );
    }
    /**
     * Enqueues a new pending body entry.
     * You **nust** call this method *before* you add an entry to the list via `.pull()` method.
     */
    enqueue() {
        __classPrivateFieldSet(this, _BodyEntries_pending, __classPrivateFieldGet(this, _BodyEntries_pending, "f") + 1, "f");
    }
    /**
     * Adds a new body entry to internal list
     *
     * @param entry An entry to add
     */
    pull(entry) {
        __classPrivateFieldGet(this, _BodyEntries_entries, "f").push(entry);
        __classPrivateFieldSet(this, _BodyEntries_pending, __classPrivateFieldGet(this, _BodyEntries_pending, "f") - 1, "f");
        if (__classPrivateFieldGet(this, _BodyEntries_pending, "f") < 1) {
            this.finish();
        }
    }
    /**
     * Finishes body processing and calls finish event.
     *
     * @param isBodyRead And optional flag indicating that the request body is fully read. Can only be true if present.
     */
    finish(isBodyRead) {
        if (isBodyRead === true) {
            __classPrivateFieldSet(this, _BodyEntries_isBodyRead, isBodyRead, "f");
        }
        if (__classPrivateFieldGet(this, _BodyEntries_isBodyRead, "f") === true && __classPrivateFieldGet(this, _BodyEntries_pending, "f") < 1) {
            this.emit("finish", new Body(__classPrivateFieldGet(this, _BodyEntries_entries, "f")));
        }
    }
}
_BodyEntries_entries = new WeakMap(), _BodyEntries_pending = new WeakMap(), _BodyEntries_isBodyRead = new WeakMap();
