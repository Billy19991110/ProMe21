var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Body_entries;
import fromEntries from "object-deep-from-entries";
import { FormData } from "formdata-node";
import { BodyField } from "./BodyField.js";
import toFieldname from "./util/pathToFieldname.js";
import isField from "./util/isField.js";
import isFile from "./util/isFile.js";
export class Body {
    constructor(entries) {
        _Body_entries.set(this, void 0);
        __classPrivateFieldSet(this, _Body_entries, entries.map(([path, value]) => [
            path,
            // Convert raw entry scalar values to BodyField class
            isFile(value) || isField(value)
                ? value
                : new BodyField(value, toFieldname(path))
        ]), "f");
    }
    /**
     * A shortcut for Body#json()
     */
    static json(value) {
        if (value instanceof Body) {
            return value.json();
        }
        return new Body(value).json();
    }
    /**
     * A shortcut for Body#formData()
     */
    static formData(value) {
        if (value instanceof Body) {
            return value.formData();
        }
        return new Body(value).formData();
    }
    get [(_Body_entries = new WeakMap(), Symbol.toStringTag)]() {
        return "Body";
    }
    /**
     * Returns an amount of entries in Body
     */
    get length() {
        return __classPrivateFieldGet(this, _Body_entries, "f").length;
    }
    *entries() {
        yield* __classPrivateFieldGet(this, _Body_entries, "f").values();
    }
    *keys() {
        for (const [key] of this) {
            yield key;
        }
    }
    *values() {
        for (const [, value] of this) {
            yield value;
        }
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    /**
     * Returns a new Body subset with only files in it
     */
    files() {
        const entries = [];
        for (const [path, value] of this) {
            if (isFile(value)) {
                entries.push([path, value]);
            }
        }
        return new Body(entries);
    }
    /**
     * Returns a new Body subset with only fields in it
     */
    fields() {
        const entries = [];
        for (const [path, value] of this) {
            if (!isFile(value)) {
                entries.push([path, value]);
            }
        }
        return new Body(entries);
    }
    /**
     * Returns an object representing Body entries
     */
    json() {
        const entries = [];
        for (const [path, value] of this) {
            entries.push([path, isFile(value) ? value : value.valueOf()]);
        }
        return fromEntries(entries);
    }
    /**
     * Returns FormData representation of Body entries
     */
    formData() {
        const form = new FormData();
        for (const [path, value] of this) {
            form.append(toFieldname(path), isFile(value) ? value : value.valueOf());
        }
        return form;
    }
}
