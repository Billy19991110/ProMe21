"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _BodyField_value;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BodyField = void 0;
const util_1 = require("util");
/**
 * BodyField class in the internal representation of a regular FormData value.
 */
class BodyField {
    constructor(value, name, options = {}) {
        _BodyField_value.set(this, void 0);
        this.name = name;
        __classPrivateFieldSet(this, _BodyField_value, value, "f");
        this.fieldnameTruncated = options.fieldnameTruncated;
        this.valueTruncated = options.valueTruncated;
        this.enc = options.enc;
        this.type = options.type;
    }
    /**
     * Returns the value of the BodyField.
     */
    valueOf() {
        return __classPrivateFieldGet(this, _BodyField_value, "f");
    }
    /**
     * Returns string representation of the BodyField value.
     */
    toString() {
        return String(this.valueOf());
    }
    [(_BodyField_value = new WeakMap(), util_1.inspect.custom)]() {
        return `[BodyField: ${this}]`;
    }
}
exports.BodyField = BodyField;
